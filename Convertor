import sys

from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtCore import Qt

class ConverterGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        # Set the window title
        self.setWindowTitle("File Converter")
        # Set the geometry of the window (x, y, width, height)
        self.setGeometry(400, 300, 500, 300)
        # Create the central widget and set it for the main window
        self.centralWidget = QWidget()
        self.setCentralWidget(self.centralWidget)
        # Create a vertical layout and set it for the central widget
        self.layout = QVBoxLayout()
        self.centralWidget.setLayout(self.layout)
        # Initialize an empty list to store file paths
        self.files = []
        # Create the drag and drop box
        self.createDragDropBox()
        # Create the file list box to display the list of files
        self.createFileListBox()
        # Create the convert button
        self.createConvertButton()

    def createDragDropBox(self):
        # Create a QLabel widget to display the instruction for dragging and dropping PDF files
        self.dragDropLabel = QLabel("Drag and Drop PDF Files Here", alignment=Qt.AlignCenter)
        self.dragDropLabel.setFont(QFont("Arial", 15))
        # Apply styling to the QLabel to create a dashed border and padding
        self.dragDropLabel.setStyleSheet("border: 2px dashed #aaa; padding: 10px;")
        # Enable the QLabel to accept drops, allowing files to be dragged and dropped onto it
        self.dragDropLabel.setAcceptDrops(True)
        # Assign custom event handlers to the QLabel for drag enter and drop events
        self.dragDropLabel.dragEnterEvent = self.dragEnterEvent
        self.dragDropLabel.dropEvent = self.dropEvent
        # Add the dragDropLabel to the layout with a weight of 2 out of 6, allocating vertical space
        self.layout.addWidget(self.dragDropLabel, 2)  # 2/6 of the vertical space

    # 2/6 of the vertical space

    def createFileListBox(self):  # Defines a method to create a file list display box
        self.fileNamesLabel = QLabel("Files:", alignment=Qt.AlignTop)  # Creates a QLabel to display "Files:" with top alignment
        self.fileNamesLabel.setFont(QFont("Arial", 15))  # Sets the font of the label to Arial with size 15
        self.fileNamesLabel.setStyleSheet(
            "border: 1px solid #aaa; padding: 10px;")  # Sets the style of the label with a border and padding
        self.layout.addWidget(self.fileNamesLabel,
                              3)  # Adds the label to the layout, taking up 3/6 of the vertical space

    def createConvertButton(self):  # Defines a method to create a convert button
        self.convertButton = QPushButton("Convert")  # Creates a QPushButton labeled "Convert"
        self.convertButton.setFont(QFont("Arial", 15))  # Sets the font of the button to Arial with size 15
        self.convertButton.clicked.connect(
            self.convertFiles)  # Connects the button's click event to the convertFiles method
        self.layout.addWidget(self.convertButton,
                              1)  # Adds the button to the layout, taking up 1/6 of the vertical space

    def dragEnterEvent(self, event):  # Defines a method to handle the event when a drag action enters the widget
        if event.mimeData().hasUrls():  # Checks if the dragged data contains URLs
            event.accept()  # Accepts the drag event if it contains URLs, indicating that the widget can handle the drop
        else:
            event.ignore()  # Ignores the drag event if it does not contain URLs, indicating that the widget cannot handle the drop

    def dropEvent(self, event):  # Defines a method named dropEvent which takes an event object as input
        if event.mimeData().hasUrls():  # Checks if the event contains URLs in its mime data
            urls = event.mimeData().urls()  # Retrieves the URLs from the event's mime data
            for url in urls:  # Iterates through each URL
                filePath = str(url.toLocalFile())  # Converts the URL to a local file path as a string
                if filePath.lower().endswith('.pdf'):  # Checks if the file path ends with '.pdf'
                    self.files.append(filePath)  # Appends the file path to a list named 'files'
                else:
                    print("Unsupported file format:", filePath)  # Prints a message for unsupported file formats
                    # Need to create a label for Error Handeling
            self.updateFileNamesLabel()  # Calls a method to update the label displaying file names
            event.accept()  # Indicates that the event has been processed
        else:
            event.ignore()

    def updateFileNamesLabel(self):  # Defines a method to update the label displaying the file names
        fileNames = [filePath.split('/')[-1] for filePath in
                     self.files]  # Creates a list of file names by extracting the last part of each file path
        self.fileNamesLabel.setText(
            "\n".join(fileNames))  # Sets the label's text to the joined list of file names, separated by newlines

    def convertFiles(self):  # Defines a method to handle the conversion of files
        print("Converting PDF files:",self.files)  # Prints a message indicating the conversion process along with the list of files


def createGui():
    app = QApplication(sys.argv)
    gui = ConverterGUI()
    gui.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    createGui()
