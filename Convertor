import sys

from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton
from PyQt5.QtCore import Qt

class ConverterGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        # Set the window title
        self.setWindowTitle("File Converter")
        # Set the geometry of the window (x, y, width, height)
        self.setGeometry(400, 300, 500, 300)
        # Create the central widget and set it for the main window
        self.centralWidget = QWidget()
        self.setCentralWidget(self.centralWidget)
        # Create a vertical layout and set it for the central widget
        self.layout = QVBoxLayout()
        self.centralWidget.setLayout(self.layout)
        # Initialize an empty list to store file paths
        self.files = []
        # Create the drag and drop box
        self.createDragDropBox()
        # Create the file list box to display the list of files
        self.createFileListBox()
        # Create the convert button
        self.createConvertButton()

    def createDragDropBox(self):
        # Create a QLabel widget to display the instruction for dragging and dropping PDF files
        self.dragDropLabel = QLabel("Drag and Drop PDF Files Here", alignment=Qt.AlignCenter)
        self.dragDropLabel.setFont(QFont("Arial", 15))
        # Apply styling to the QLabel to create a dashed border and padding
        self.dragDropLabel.setStyleSheet("border: 2px dashed #aaa; padding: 10px;")
        # Enable the QLabel to accept drops, allowing files to be dragged and dropped onto it
        self.dragDropLabel.setAcceptDrops(True)
        # Assign custom event handlers to the QLabel for drag enter and drop events
        self.dragDropLabel.dragEnterEvent = self.dragEnterEvent
        self.dragDropLabel.dropEvent = self.dropEvent
        # Add the dragDropLabel to the layout with a weight of 2 out of 6, allocating vertical space
        self.layout.addWidget(self.dragDropLabel, 2)  # 2/6 of the vertical space

    # 2/6 of the vertical space

    def createFileListBox(self):
        self.fileNamesLabel = QLabel("Files:", alignment=Qt.AlignTop)
        self.fileNamesLabel.setFont(QFont("Arial", 15))
        self.fileNamesLabel.setStyleSheet("border: 1px solid #aaa; padding: 10px;")
        self.layout.addWidget(self.fileNamesLabel, 3)  # 3/6 of the vertical space

    def createConvertButton(self):
        self.convertButton = QPushButton("Convert")
        self.convertButton.clicked.connect(self.convertFiles)
        self.layout.addWidget(self.convertButton, 1)  # 1/6 of the vertical space

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls():
            urls = event.mimeData().urls()
            for url in urls:
                filePath = str(url.toLocalFile())
                if filePath.lower().endswith('.pdf'):
                    self.files.append(filePath)
                else:
                    print("Unsupported file format:", filePath)
            self.updateFileNamesLabel()
            event.accept()
        else:
            event.ignore()

    def updateFileNamesLabel(self):
        fileNames = [filePath.split('/')[-1] for filePath in self.files]
        self.fileNamesLabel.setText("\n".join(fileNames))

    def convertFiles(self):
        print("Converting PDF files:", self.files)

def createGui():
    app = QApplication(sys.argv)
    gui = ConverterGUI()
    gui.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    createGui()
